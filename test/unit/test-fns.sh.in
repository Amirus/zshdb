#!@SH_PROG@
# -*- shell-script -*-

test_copies()
{
    typeset result='bogus'

#     _Dbg_copies 'a' 'b'
#     assertFalse '_Dbg_copies "a" "b" should fail' "$?"

    _Dbg_copies 'a' -1
    assertFalse '_Dbg_copies "a" -1 should fail' "$?"

    _Dbg_copies 'a' 3
    assertTrue '_Dbg_copies "a" 3 should succeed' "$?"
    assertEquals 'aaa' "$result"

    _Dbg_copies ' ab' 4
    assertTrue '_Dbg_copies " ab" 4 should succeed' "$?"
    assertEquals ' ab ab ab ab' "$result"
}

# Test _Dbg_eqs_dq
test_esc_dq_function()
{
  check_esc_dq () {
    local orig="$1"
    local transform="$(_Dbg_esc_dq "$orig")"
    eval 'got=$(echo "$1")'
    assertEquals "$orig" "$got"
  }
  check_esc_dq 'Now is the time'
  check_esc_dq '"Now is the time"'
  check_esc_dq 'Make $$'

  assertEquals 'abc' $(_Dbg_esc_dq abc)
  assertEquals '\\\"abc\\\"' $(_Dbg_esc_dq '\"abc\"')
  # FIXME: 
  # assertEquals '\\\"a\\bc\\\"' $(_Dbg_esc_dq '\"a\bc\"')

}

# Test _Dbg_set_entry and _Dbg_set_to_return_from_debugger
test_esc_dbg_enter_return() {
  local old_IFS="$IFS"
  local old_PS4="$PS4"
  local myps4="Well, isn't that just dandy."
  IFS='hi there'
  PS4="$myps4"
  _Dbg_set_debugger_entry
  _Dbg_restore_user_vars
  IFS=$old_IFS
  assertEquals "$myps4" "$PS4"
  PS4=$old_PS4
}

# Test _Dbg_is_function
test_defined()
{
    _Dbg_defined 
    assertFalse 'No variable given; is_function should report false' $? 
    unset xxx
    _Dbg_defined xxx
    assertFalse 'variable xxx should not be defined' $? 
    typeset xxx=1
    _Dbg_defined xxx
    assertTrue 'variable xxx should be defined' $? 
}

# Test _Dbg_is_function
test_is_function()
{
    _Dbg_is_function 
    assertFalse 'No function given; is_function should report false' $? 

    typeset fn
    fn=$(declare -f function_test >/dev/null 2>&1)
    [[ -n "$fn" ]] && unset -f function_test
    _Dbg_is_function function_test
    assertFalse 'function_test should not be defined' $? 

    typeset -i function_test=1
    _Dbg_is_function function_test
    assertFalse 'test_function should still not be defined' "$?"

    function_test() { :; }
    _Dbg_is_function function_test
    assertTrue 'test_function should now be defined' "$?"

    function another_function_test { :; }
    _Dbg_is_function another_function_test "$?"

    _function_test() { :; }
    _Dbg_is_function _function_test
    assertFalse 'fn _function_test is system fn; is_function should report false' $? 

    _Dbg_is_function _function_test 1 
    assertTrue 'fn _function_test is system fn which we want; should report true' $? 
}

# Test _Dbg_set_dol_q
test_set_q()
{
    _Dbg_set_dol_q 1 
    assertFalse '$? should have been set to 1==false' $? 
    _Dbg_set_dol_q 0 
    assertTrue '$? should have been set to 0==true' $? 
#     # Test without giving a parameter
#     local _Ddg_debugged_exit_code=0
#     _Dbg_set_dol_q 
#     assertTrue '$? should be set true via _Dbg_debugged_exit_code' $? 
#     _Ddg_debugged_exit_code=1
#     _Dbg_set_dol_q
#     assertFalse '$? should be set false via _Dbg_debugged_exit_code' $? 
}

# Test _Dbg_split
test_split()
{
    setopt ksharrays
    typeset -a words
    _Dbg_split 'foo.c:5' ':'
    assertEquals 'foo.c' ${split_result[0]}
    assertEquals '5' ${split_result[1]}
}

# Make sure @abs_top_srcdir@ has a trailing slash
if [ '@abs_top_srcdir@' = '' ] ; then
  echo "Something is wrong abs_top_srcdir is not set."
 exit 1
fi
abs_top_srcdir=@abs_top_srcdir@
abs_top_srcdir=${abs_top_srcdir%%/}/

_Dbg_libdir=$abs_top_srcdir
set -- -q  # Don't need to show banner
. $abs_top_srcdir/dbg-pre.sh
. $abs_top_srcdir/lib/fns.sh
. $abs_top_srcdir/lib/frame.sh
. $abs_top_srcdir/lib/journal.sh
. $abs_top_srcdir/lib/save-restore.sh

set -o shwordsplit
SHUNIT_PARENT=$0

# load shunit2
shunit_file=${abs_top_srcdir}test/unit/shunit2
. ${shunit_file}
