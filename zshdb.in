#!@ZSH_PROG@ -f
# -*- shell-script -*-
# zshdb - top-level debugger program.
#
#   Copyright (C) 2008 Rocky Bernstein rocky@gnu.org
#
#   zshdb is free software; you can redistribute it and/or modify it under
#   the terms of the GNU General Public License as published by the Free
#   Software Foundation; either version 2, or (at your option) any later
#   version.
#
#   zshdb is distributed in the hope that it will be useful, but WITHOUT ANY
#   WARRANTY; without even the implied warranty of MERCHANTABILITY or
#   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#   for more details.
#   
#   You should have received a copy of the GNU General Public License along
#   with zshdb; see the file COPYING.  If not, write to the Free Software
#   Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.

# Original $0. Note we can't set this in an include.
typeset -r _Dbg_orig_0=$0

# Equivalent to basename $0; the short program name
typeset -r _Dbg_pname=${0##*/}  

## Stuff set by autoconf/configure ###
typeset prefix=@prefix@
typeset _Dbg_libdir=@datarootdir@/zshdb
###

[[ ! -d $_Dbg_libdir ]] && _Dbg_libdir='.'
# Parse just the libdir option
local -a libdir
zparseopts -a libdir -E L: -library:
if (( ${#libdir} > 0 )) ; then
    eval "lib_opts=($libdir)"
    if [[ ! -d $lib_opts[2] ]] ; then
	print "$lib_opts[2] is not a directory"
	exit 1
    fi
    _Dbg_libdir=$lib_opts[2]
fi

# Pull in the rest of the debugger code.
typeset _Dbg_main="$_Dbg_libdir/dbg-main.sh"
if [[ ! -r $_Dbg_main ]] ; then 
  print "${_Dbg_pname}: Can't read debugger library file '${_Dbg_main}'."
  print "${_Dbg_pname}: Perhaps zshdb is installed wrong (if its installed)." >&2
  print "${_Dbg_pname}: Try running zshdb using -L (with a different directory)." >&2
  print "${_Dbg_pname}: Run zshdb --help for a list and explanation of options." >&2
  exit 1
    
fi
. ${_Dbg_libdir}/dbg-main.sh

# Note that this is called via zshdb rather than "zsh --debugger" or zshdb-trace
_Dbg_script=1

# TEMPORARY: Save me typing in testing.
if (( ${#_Dbg_script_args[@]} > 0 )) ; then
    _Dbg_script_file="$_Dbg_script_args[1]"
    shift _Dbg_script_args
else
    _Dbg_script_file=./testing.sh
fi

# setopt localtraps
while : ; do
  # trap 'echo ERR encountered inside debugger' ERR

  _Dbg_step_ignore=2
  trap '_Dbg_debug_trap_handler "$@"' DEBUG
  . $_Dbg_script_file ${_Dbg_script_args[@]}
  trap '' DEBUG
  _Dbg_msg "Program terminated. Type 's' or 'R' to restart."
  _Dbg_process_commands
done
