#!@ZSH_PROG@
# -*- shell-script -*-

# Original $0. Note we can't set this in an include.
typeset -r _Dbg_orig_0=$0

# Equivalent to basename $0; the short program name
typeset -r _Dbg_pname=${0##*/}  

## Stuff set by autoconf/configure ###
prefix=@prefix@ # cygwin gets PKGDATADIR wrong
typeset _Dbg_libdir=${prefix}/share/zshdb
###

[[ ! -d _Dbg_libdir ]] && _Dbg_libdir='.'
# Parse just the libdir option
local libdir
zparseopts -E L:=libdir -library:=libdir
if [[ -n $libdir ]] ; then
    local -a lib_opts
    lib_opts=($libdir)
    if [[ ! -d $lib_opts[2] ]] ; then
	print "$lib_opts[2] is not a directory"
	exit 1
    fi
    _Dbg_libdir=$lib_opts[2]
fi

# Pull in the rest of the debugger code.
typeset _Dbg_main="$_Dbg_libdir/dbg-main.sh"
if [[ ! -r $_Dbg_main ]] ; then 
  print "${_Dbg_pname}: Can't read debugger library file '${_Dbg_main}'."
  print "${_Dbg_pname}: Perhaps zshdb is installed wrong (if its installed)." >&2
  print "${_Dbg_pname}: Try running zshdb using -L (with a different directory)." >&2
  print "${_Dbg_pname}: Run zshdb --help for a list and explanation of options." >&2
  exit 1
    
fi
. ${_Dbg_libdir}/dbg-main.sh

# Note that this is called via zshdb rather than "zsh --debugger" or zshdb-trace
_Dbg_script=1

# TEMPORARY: Save me typing in testing.
if (( ${#_Dbg_script_args[@]} > 0 )) ; then
    _Dbg_script_file="$_Dbg_script_args[1]"
    shift _Dbg_script_args
else
    _Dbg_script_file=./testing.sh
fi

# setopt localtraps
while : ; do
  # trap 'echo ERR encountered inside debugger' ERR

  _Dbg_step_ignore=2
  trap '_Dbg_debug_trap_handler "$@"' DEBUG
  . $_Dbg_script_file ${_Dbg_script_args[@]}
  trap '' DEBUG
  _Dbg_msg "Program terminated. Type 's' or 'R' to restart."
  _Dbg_process_commands
done
